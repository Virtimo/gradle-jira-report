/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package de.virtimo

import com.github.tomakehurst.wiremock.WireMockServer
import spock.lang.IgnoreIf

import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import org.gradle.testkit.runner.UnexpectedBuildFailure
import spock.lang.Shared
import spock.lang.Specification
import org.gradle.testkit.runner.GradleRunner

/**
 * A simple functional test for the 'de.virtimo.jira-report' plugin.
 */
class JiraReportPluginFunctionalTest extends Specification {

    @Shared
    WireMockServer wireMockServer = new WireMockServer(wireMockConfig().port(8089));

    def setupSpec() {
        wireMockServer.start()

        wireMockServer.stubFor(
                get(urlPathMatching("/rest/api/3/.*"))
                        .withBasicAuth("foo", "bar")
                        .willReturn(ok()
                                .withHeader("Content-Type", "application/json")
                                .withBodyFile("jiraIssues.json"))
        )
    }

    def cleanupSpec() {
        wireMockServer.stop();
    }

    def prepareProjectDir(buildScript, template) {

        def projectDir = new File("build/functionalTest")
        projectDir.deleteDir()
        projectDir.mkdirs()
        new File(projectDir, "settings.gradle") << ""
        new File(projectDir, "gradle.properties") << "foo=bar"
        new File(projectDir, "build.gradle") << buildScript
        new File(projectDir, "template.ftlh") << template
        return projectDir
    }

    def runGradle(projectDir, arguments) {
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withDebug(true)
        runner.withArguments(arguments)
        runner.withProjectDir(projectDir)
        return runner.build()
    }


    def "check missing username"() {
        given:
        def projectDir = prepareProjectDir("""
            plugins {
                id('de.virtimo.jira-report')
            }
            
            tasks.register('testJira',de.virtimo.task.JiraReport) {
                    serverUrl = "http://localhost:8089"
                    jql = "project = BPC and updated < 2016-01-01"
                    destination = file("build/issues.adoc")
                    templateFile = file("template.ftlh")
                    password = "bar"
            }
        """,
                "")

        when:
        def result = runGradle(projectDir, "testJira")

        then:
        thrown UnexpectedBuildFailure
    }


    def "check missing password"() {
        given:
        def projectDir = prepareProjectDir("""
            plugins {
                id('de.virtimo.jira-report')
            }
            
            tasks.register('testJira',de.virtimo.task.JiraReport) {
                    serverUrl = "http://localhost:8089"
                    jql = "project = BPC and updated < 2016-01-01"
                    destination = file("build/issues.adoc")
                    templateFile = file("template.ftlh")
                    username = "foo"
            }
        """,
                "")

        when:
        def result = runGradle(projectDir, "testJira")

        then:
        thrown UnexpectedBuildFailure
    }

    def "authentication failed"() {
        given:
        def projectDir = prepareProjectDir("""
            plugins {
                id('de.virtimo.jira-report')
            }
            
            tasks.register('testJira',de.virtimo.task.JiraReport) {
                    serverUrl = "http://localhost:8089"
                    jql = "project = BPC and updated < 2016-01-01"
                    username = "wrongUser"
                    password = "wrongPassword"
                    destination = file("build/issues.adoc")
                    templateFile = file("template.ftlh")
            }
        """,
                "")

        when:
        def result = runGradle(projectDir, "testJira")

        then:
        thrown UnexpectedBuildFailure
    }

    def "can run task"() {
        given:
        def projectDir = prepareProjectDir("""
            plugins {
                id('de.virtimo.jira-report')
            }
            
            tasks.register('testJira',de.virtimo.task.JiraReport) {
                    serverUrl = "http://localhost:8089"
                    jql = "project = BPC and updated < 2016-01-01"
                    username = "foo"
                    password = "bar"
                    destination = file("build/issues.adoc")
                    templateFile = file("template.ftlh")
            }
        """,
                """
= Changelog - My Own Template

== Issues

<#list issues as issue>
* \${issue.key} - \${issue.fields.summary}
</#list>
        """)

        when:
        def result = runGradle(projectDir, "testJira")

        then:
        new File(projectDir, "build/issues.adoc").exists()
    }

    @IgnoreIf({!env.username})
    def "real world test"() {
        given:
        def projectDir = prepareProjectDir("""
            plugins {
                id('de.virtimo.jira-report')
            }
            
            tasks.register('testJira',de.virtimo.task.JiraReport) {
                    serverUrl = "${System.getenv("server")}"
                    jql = "project = BPC and updated < 2016-01-01"
                    username = "${System.getenv("username")}"
                    password = "${System.getenv("password")}"
                    destination = file("build/issues.adoc")
                    templateFile = file("template.ftlh")
            }
        """,
                """
= Changelog - My Own Template

== Issues

<#list issues as issue>
* \${issue.key} - \${issue.fields.summary}
</#list>
        """)

        when:
        def result = runGradle(projectDir, "testJira")

        then:
        new File(projectDir, "build/issues.adoc").exists()
    }
}
